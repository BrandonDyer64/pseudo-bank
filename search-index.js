var searchIndex = JSON.parse('{\
"pseudo_bank":{"doc":"PseudoBankA binary executable to handle a spreadsheet of…","i":[[5,"main","pseudo_bank","Processes a given csv and outputs the final account data…",null,[[]]],[0,"model","","",null,null],[0,"account","pseudo_bank::model","Holds a client\'s account information, such as current…",null,null],[3,"Account","pseudo_bank::model::account","Holds the data needed for a client\'s account",null,null],[12,"id","","",0,null],[12,"balance","","",0,null],[12,"is_locked","","",0,null],[12,"disputes","","",0,null],[11,"new","","",0,[[["clientid",3]],["account",3]]],[11,"get_available","","`total - disputed`",0,[[],["decimal",3]]],[11,"get_held","","Sum of all disputed transactions",0,[[],["decimal",3]]],[11,"is_locked","","Whether or not new transactions can be applied to this…",0,[[]]],[11,"get_id","","",0,[[],["clientid",3]]],[11,"apply_transaction","","Alters the current balances using a given transaction.",0,[[["transaction",3],["hashmap",3]],[["transactionerror",4],["result",4]]]],[0,"error","pseudo_bank::model","Error types for use in Results",null,null],[0,"transaction_error","pseudo_bank::model::error","",null,null],[4,"TransactionError","pseudo_bank::model::error::transaction_error","",null,null],[13,"Overdraft","","",1,null],[12,"available","pseudo_bank::model::error::transaction_error::TransactionError","",2,null],[12,"transaction_amount","","",2,null],[13,"TransactionDoesNotExist","pseudo_bank::model::error::transaction_error","",1,null],[13,"TransactionNotDisputed","","",1,null],[13,"AccountLocked","","",1,null],[0,"id","pseudo_bank::model","Useful datatypes for storing identifiers",null,null],[0,"client_id","pseudo_bank::model::id","",null,null],[3,"ClientId","pseudo_bank::model::id::client_id","",null,null],[12,"0","","",3,null],[0,"transaction_id","pseudo_bank::model::id","",null,null],[3,"TransactionId","pseudo_bank::model::id::transaction_id","",null,null],[12,"0","","",4,null],[0,"transaction","pseudo_bank::model","",null,null],[3,"Transaction","pseudo_bank::model::transaction","",null,null],[12,"transaction_type","","",5,null],[12,"client","","",5,null],[12,"tx","","",5,null],[12,"amount","","",5,null],[0,"transaction_type","pseudo_bank::model","Enum for transactions. Deposit, Withdraw, Dispute...",null,null],[4,"TransactionType","pseudo_bank::model::transaction_type","These values will be parsed from lowercase values",null,null],[13,"Deposit","","",6,null],[13,"Withdraw","","",6,null],[13,"Dispute","","",6,null],[13,"Resolve","","",6,null],[13,"Chargeback","","",6,null],[0,"spreadsheet","pseudo_bank","A couple of functions for processing spreadsheets",null,null],[5,"read_spreadsheet","pseudo_bank::spreadsheet","Takes a spreadsheet reader iterator and processes each…",null,[[["reader",3],["store",3]]]],[5,"write_spreadsheet","","Given a store, will write the current account information…",null,[[["writer",3],["store",3]]]],[0,"store","pseudo_bank","The \\\"Bank\\\"",null,null],[3,"Store","pseudo_bank::store","The core \\\"bank\\\" of the program",null,null],[12,"accounts","","",7,null],[12,"transactions","","",7,null],[11,"new","","",7,[[],["store",3]]],[11,"apply_transaction","","A passthrough for [Account]\'s apply_transaction method.",7,[[["transaction",3]],["result",4]]],[11,"get_accounts","","",7,[[],["hashmap",3]]],[11,"get_transactions","","",7,[[],["hashmap",3]]],[11,"from","pseudo_bank::model::account","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","pseudo_bank::model::error::transaction_error","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","pseudo_bank::model::id::client_id","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","pseudo_bank::model::id::transaction_id","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","pseudo_bank::model::transaction","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","pseudo_bank::model::transaction_type","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","pseudo_bank::store","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"clone","pseudo_bank::model::id::client_id","",3,[[],["clientid",3]]],[11,"clone","pseudo_bank::model::id::transaction_id","",4,[[],["transactionid",3]]],[11,"clone","pseudo_bank::model::transaction","",5,[[],["transaction",3]]],[11,"clone","pseudo_bank::model::transaction_type","",6,[[],["transactiontype",4]]],[11,"eq","pseudo_bank::model::id::client_id","",3,[[["clientid",3]]]],[11,"ne","","",3,[[["clientid",3]]]],[11,"eq","pseudo_bank::model::id::transaction_id","",4,[[["transactionid",3]]]],[11,"ne","","",4,[[["transactionid",3]]]],[11,"fmt","pseudo_bank::model::account","",0,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::error::transaction_error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::id::client_id","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::id::transaction_id","",4,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::transaction","",5,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::transaction_type","",6,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::store","",7,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::error::transaction_error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::id::client_id","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pseudo_bank::model::id::transaction_id","",4,[[["formatter",3]],["result",6]]],[11,"hash","pseudo_bank::model::id::client_id","",3,[[]]],[11,"hash","pseudo_bank::model::id::transaction_id","",4,[[]]],[11,"deserialize","pseudo_bank::model::id::client_id","",3,[[],["result",4]]],[11,"deserialize","pseudo_bank::model::id::transaction_id","",4,[[],["result",4]]],[11,"deserialize","pseudo_bank::model::transaction","",5,[[],["result",4]]],[11,"deserialize","pseudo_bank::model::transaction_type","",6,[[],["result",4]]],[11,"serialize","pseudo_bank::model::account","Serializes the account data into a human readable set of…",0,[[],["result",4]]],[11,"serialize","pseudo_bank::model::id::client_id","",3,[[],["result",4]]],[11,"serialize","pseudo_bank::model::id::transaction_id","",4,[[],["result",4]]]],"p":[[3,"Account"],[4,"TransactionError"],[13,"Overdraft"],[3,"ClientId"],[3,"TransactionId"],[3,"Transaction"],[4,"TransactionType"],[3,"Store"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);